{
  "title": "リソースのファイルサイズを小さくする",
  "date": "2018-1-9",
  "description": "",
  "text": "<p>　ウェブアプリケーションはサーバーと通信してリソースを取得するため、リソースとなるファイルのサイズはアプリケーション全体のパフォーマンスを左右する。よって、ウェブアプリケーションの開発者は、ファイルサイズの肥大化を防ぐ設計・実装をしなければならない。</p><p>　HTML・CSS・JavaScriptのコード量を減らすことで、そのファイルサイズを最小化することができる。ただし、開発の生産性を考慮せずにコード量を減らすと、コードの可読性、メンテナンスのしやすさ、拡張性が損なわれる。それらの良し悪しは開発者それぞれが持っている基準に依存するため、コーディング規約を設定したり、コード整形ツールを利用したりすることで、ファイルサイズの肥大化を防ぐコードの書き方の属人性は可能な限り低く保つべきである。</p><p>　上記のような開発の生産性が高いコードにインデントや改行、コメントアウトは不可欠であるため、ファイルサイズは肥大化する。そのようなコードは開発用に管理しておき、サーバーにアップロードするファイルにコード圧縮ツールを使うことで、ブラウザが取得するファイルサイズを小さくすることができる。コード圧縮ツールはコードを実行する上で不要なインデントやコメントアウトを取り除くが、例えば、ライセンスの記述が必要なライブラリを使用していると、ライセンスを表記しているコメントアウトまで取り除しまっては規約違反になる。コードの圧縮方法にルールが必要であれば、コード圧縮ツールの設定で圧縮のルールを設定する。</p><p>　画像ファイルはサイズが大きくなるため、基本的には圧縮ツールを使ってファイルサイズを小さくすべきである。ただし、圧縮すればするほど画質は劣化するということは考慮しなければならない。また、高解像度のディスプレイでは、画像が小さく表示されることを防ぐため、写真を引き伸ばすように画像を等倍して表示している。結果的に、大きなサイズの画像ファイルでなければ高解像度ディスプレイでの見た目は悪化する一方で、画像のサイズを大きくすればファイルサイズも大きくなってしまう。この問題はディズプレイのあらゆる解像度に対応できる、複数のサイズの画像を用意することで対処できる。ユーザーのディスプレイの解像度に応じて過不足のないサイズの画像をリソースとして振り分けることで、ユーザー（ディスプレイ）ごとに最適化されたファイルサイズの画像を配信することが可能になる。</p><p>　ウェブアプリケーションの開発時だけでなく、ユーザーがサーバーとリソースをやりとりするタイミングでもファイルサイズを小さくすることはできる。サーバーは圧縮したリソースを配信して、ブラウザが受け取ったら解凍することで通信時のファイルサイズを小さくする方法である。gzipという圧縮方式が普及している。ただし、開発時にファイルサイズが十分に最適化されていて通信時の圧縮の効果が薄い場合など、その圧縮・解凍のコストに見合う恩恵が得られない可能性もある。</p>"
}
